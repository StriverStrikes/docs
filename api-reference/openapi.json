{
  "openapi": "3.0.1",
  "info": {
    "title": "Meeting Agent API",
    "description": "API for managing meeting agents, allowing them to join meetings with customizable configurations and fetch meeting data.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://your-company-domain/api/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/agent/join": {
      "post": {
        "description": "Joins a meeting with a customizable agent.",
        "requestBody": {
          "description": "Details of the meeting agent joining the session.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Agent successfully joined the meeting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access, invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/agent/{agentId}/meeting-data": {
      "get": {
        "description": "Fetches meeting data for a specific agent by agentId.",
        "parameters": [
          {
            "name": "agentId",
            "in": "query",
            "description": "The ID of the agent whose meeting data is being fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting data successfully fetched for the agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing agentId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access, invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/agent/{agentId}/transcript": {
      "get": {
        "description": "Fetches meeting transcript for a specific agent by agentId.",
        "parameters": [
          {
            "name": "agentId", 
            "in": "query",
            "description": "The ID of the agent whose transcript is being fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting transcript successfully fetched for the agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing agentId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access, invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "JoinRequest": {
        "type": "object",
        "properties": {
          "meetingUrl": {
            "type": "string",
            "description": "URL of the meeting the agent will join"
          },
          "agentName": {
            "type": "string",
            "description": "Name of the meeting agent"
          },
          "adhoc": {
            "type": "boolean",
            "description": "Indicates if the agent should join as an ad-hoc participant",
            "default": false
          },
          "transcriptionProvider": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of transcription provider",
                "default": "meeting_captions"
              },
              "apiKey": {
                "type": "string",
                "description": "API key for transcription provider"
              }
            }
          },
          "automaticLeave": {
            "type": "object",
            "properties": {
              "EveryoneLeftTimeout": {
                "type": "integer",
                "description": "Time (in seconds) to wait before the agent leaves if everyone has left",
                "default": 60
              },
              "NoOneJoinedTimeout": {
                "type": "integer",
                "description": "Time (in seconds) to wait before the agent leaves if no one has joined",
                "default": 900
              },
              "WaitingRoomTimeout": {
                "type": "integer",
                "description": "Time (in seconds) to wait before the agent leaves if waiting in the room",
                "default": 900
              }
            }
          },
          "webhookUrl": {
            "type": "string",
            "description": "Webhook URL to send meeting updates"
          },
          "metadata": {
            "type": "object",
            "description": "Custom metadata that can be included with the request",
            "additionalProperties": true,
            "default": { "additionalKey": "value" }
          }
        },
        "required": [
          "meetingUrl",
          "agentName",
          "adhoc"
        ]
      },
      "JoinResponse": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "Unique identifier of the agent that joined the meeting"
          },
          "statusChanges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": { "type": "string" },
                "createdAt": { "type": "string", "format": "date-time" },
                "sub_code": { "type": "string", "nullable": true }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message from the agent"
          }
        }
      },
      "MeetingDataResponse": {
        "type": "object",
        "properties": {
          "agent": {
            "type": "object",
            "properties": {
              "agentId": {
                "type": "string",
                "description": "Unique identifier of the agent"
              },
              "agentName": {
                "type": "string",
                "description": "Name of the agent"
              },
              "meetingId": {
                "type": "string",
                "description": "Unique identifier of the meeting"
              },
              "meetingUrl": {
                "type": "string",
                "description": "URL of the meeting"
              },
              "webhookUrl": {
                "type": "string",
                "description": "Webhook URL for receiving meeting events"
              },
              "platform": {
                "type": "string",
                "description": "Meeting platform (e.g. GMEET)"
              },
              "entryMessage": {
                "type": "string",
                "description": "Message sent when agent joins meeting"
              },
              "transcriptionProvider": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of transcription provider"
                  }
                }
              }
            }
          },
          "recording": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the meeting recording"
              },
              "startedAt": {
                "type": "string",
                "format": "date-time",
                "description": "When recording started"
              },
              "completedAt": {
                "type": "string",
                "format": "date-time", 
                "description": "When recording completed"
              }
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of participant"
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the meeting data was created"
          },
          "statusChanges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Status code"
                },
                "sub_code": {
                  "type": "string",
                  "nullable": true,
                  "description": "Additional status details"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "When status changed"
                }
              }
            }
          }
        }
      },
      "TranscriptResponse": {
        "type": "array",
        "items": {
              "type": "object",
              "properties": {
                "speaker": {
                  "type": "string",
                  "description": "Name of the speaker"
                },
                "start_timestamp": {
                  "type": "number",
                  "format": "float",
                  "description": "Start time of the speech segment in seconds",
                  "default": 0
                },
                "end_timestamp": {
                  "type": "number",
                  "format": "float",
                  "description": "End time of the speech segment in seconds",
                  "default": 0
                },
                "words": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "start_timestamp": {
                        "type": "number",
                        "format": "float",
                        "description": "Start time of the word in seconds",
                        "default": 0
                      },
                      "end_timestamp": {
                        "type": "number",
                        "format": "float",
                        "description": "End time of the word in seconds",
                        "default": 0
                      },
                      "text": {
                        "type": "string",
                        "description": "The spoken word or phrase"
                      }
                    }
                  }
                }
            }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error",
          "message"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Use the format 'Token <actual token>' for authentication."
      }
    }
  }
}